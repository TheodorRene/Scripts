#!/usr/bin/ruby
file = ARGV[0]
if ["--help", "-h"].include? file
  puts %{
  rocaf [OPTIONS] [FILE]
  -------------------------------------------------------------
  "Run Or Compile Any File"
  Takes in one(1) file as argument
  Returns output from running the file given the file extension
  -------------------------------------------------------------
  Supported extensions are md(markdown), py(python), rb(ruby) and tex(latex).
  Simple support for cpp(C++) and hs(Haskell)
}
  exit(0)
end

if file.nil?
  puts %{
  No file given. rocaf -h for help
}
  exit(0)
end

ending = file.match(/.*\.(.*$)/)

## Functions for executing programs ##
comp_markdown = proc {|file|
  nameOfFile = file.match(/(.*)\.(.*$)/)
  if !nameOfFile.nil?
    shell_cmd = `pandoc #{file} --pdf-engine=xelatex -o #{nameOfFile[1]}.pdf`
    puts shell_cmd
    `notify-send -t 1000 "#{file} compiled to pdf"`
    puts "Markdown file parsed"
  else
    puts "Something went wrong"
  end
}

run_python = proc { |file|
  puts `python #{file}`
}

run_ruby = proc { |file|
  puts `ruby #{file}`
}

run_bash = proc{ |file|
  puts `bash #{file}`
}

comp_latex = proc { |file|
  puts `latexmk -pdf #{file}`
}

run_cpp = proc { |_|
  no_suffix = file.delete_suffix('.cpp')
  puts `g++ -std=c++0x -o #{no_suffix} #{file} && ./#{no_suffix}` 
}

run_c = proc { |file|
  no_suffix = file.delete_suffix('.c')
  puts `gcc -o #{no_suffix} #{file} && ./#{no_suffix}` 
}

run_haskell = proc { |file|
  no_suffix = file.delete_suffix('.hs')
  puts `ghc -o #{no_suffix} #{file} && ./#{no_suffix}`
}

run_rust = proc { |file|
  puts `rustc #{file} && ./#{file.delete_suffix('.rs')}`
}

## End ##

## Hash with possible file extensions mapped to executing programs ##
func_hash = {'md' => comp_markdown,
             'py' => run_python,
             'rb' => run_ruby,
             'sh' => run_bash,
             'tex' => comp_latex,
             'cpp' => run_cpp,
             'hs' => run_haskell,
             'rs' => run_rust,
              'c' => run_c
}
## End ##

# MAIN #
if !ending.nil?  
  begin
    func_hash.fetch(ending[1]).call(file)
    exit(0)
  rescue KeyError
    puts "File ending not supported"
    exit(1)
  end
else
  puts "No file ending found"
  exit(1)
end

